plugins {
    id "org.jetbrains.kotlin.jvm" version "1.2.60"
    id "com.gradle.build-scan" version "1.13.1"
}

group "ru.grushetsky"
version "NEXT-SNAPSHOT"

ext.kotlin_version = "1.2.60"
ext.junitPlatformVersion = "1.2.0"
ext.junitJupiterVersion = "5.2.0"
ext.antlrVersion = "4.7"
ext.assertJVersion = "3.9.1"
ext.javaVersion = JavaVersion.VERSION_1_8

test {
    useJUnitPlatform()
}

buildScan {
    termsOfServiceUrl = "https://gradle.com/terms-of-service"
    termsOfServiceAgree = "yes"
}

apply plugin: "kotlin"
apply plugin: "antlr"
apply plugin: "idea"
apply plugin: "maven-publish"
apply plugin: "jacoco"

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenPublication {
        destination = file("${jar.archivePath.parentFile}/${project.name}-${version}.pom")
    }
}

repositories {
    jcenter()
}

dependencies {
    antlr("org.antlr:antlr4:$antlrVersion")

    implementation("org.antlr:antlr4-runtime:$antlrVersion")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")

    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion")
    testImplementation("org.assertj:assertj-core:$assertJVersion")

    testRuntime("org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion")
    testRuntime("org.junit.platform:junit-platform-launcher:$junitPlatformVersion")
}

sourceCompatibility = ext.javaVersion
targetCompatibility = ext.javaVersion

compileKotlin {
    kotlinOptions.jvmTarget = javaVersion.toString()
}

compileTestKotlin {
    kotlinOptions.jvmTarget = javaVersion.toString()
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-package", "ru.grushetsky.m3uparser"]
    outputDirectory = new File("${project.buildDir}/generated-src/antlr/main/ru/grushetsky/${project.name}")
}

compileKotlin.dependsOn generateGrammarSource

// earlier versions includes kotlin-generated code into coverage
// should be removed once plugin will use 0.8.2 by default
jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = false
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude:
                    ['**/M3uParserBaseListener.*',
                     '**/M3uParser$*.*'])
        })
    }
}

check.dependsOn jacocoTestReport